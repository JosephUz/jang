(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const html = require('./libs/html.js');

var exports = {};

var languages = {};
var current = html.element.getAttribute('lang');
var events = {
    onChange: []
}

Object.defineProperties(exports, {
    current: {
        get: function () {
            return current;
        }
    }
});

exports.onChange = function (fn) {
    events.onChange.push(fn);
}

exports.clearOnChanges = function (fn) {
    events.onChange = [];
}

exports.get = function () {
    return languages[current];
}

exports.refresh = function () {
    html.read();
    html.refresh(exports.get());
}

exports.set = function (name) {
    if (current != name) {
        current = name;
        html.element.setAttribute('lang', current);

        exports.refresh();

        events.onChange.forEach(function (fn) {
            fn(current, languages[current]);
        });
    }
}

exports.add = function (name, value) {
    if (typeof (name) == "object" && name instanceof Array) {
        name.forEach(function (item) {
            exports.add(item.name, item.value);
        });
    } else if (typeof (name) == "string" && typeof (value) == "object") {
        languages[name] = value;
    } else if (!name) {
        throw new Error('missing arguments');
    }
}

module.exports = exports;
},{"./libs/html.js":3}],2:[function(require,module,exports){
const Script = require('./script.js');

function Attribute(element) {
    var _this = this;
    this.element = element;
    this.scripts = element.getAttribute('jang').split(';').filter(function (attr) {
        return attr;
    }).map(function (attr) {
        var keyValue = attr.split(':');
        return new Script(keyValue[1]).onChange(function (value) {
            _this.element.setAttribute(keyValue[0], value);
        });
    });
    this.element.removeAttribute('jang');
}

Attribute.prototype.refresh = function (language) {
    this.scripts.forEach(function (script) {
        script.refresh(language);
    });
}

Attribute.prototype.exist = function () {
    return document.body.contains(this.element);
}

module.exports = Attribute;
},{"./script.js":5}],3:[function(require,module,exports){
const Jang = require('./jang.js');
const Attribute = require('./attribute.js');

var exports = {};

var jangs = [];

Object.defineProperties(exports, {
    element: {
        get: function () {
            if (exports._element == null)
                exports._element = document.getElementsByTagName("html")[0];
            return exports._element;
        }
    }
});

exports.refresh = function (language) {
    jangs.forEach(function (jang) {
        jang.refresh(language);
    });
}

exports.read = function () {
    jangs = jangs.filter(function (jang) {
        return jang.exist();
    }).concat(Array.prototype.map.call(document.getElementsByTagName('jang'), function (item) {
        return item;
    }).map(function (element) {
        return new Jang(element);
    })).concat((Array.prototype.map.call(document.querySelectorAll('[jang]'), function (element) {
        return new Attribute(element);
    })));
}

module.exports = exports;

},{"./attribute.js":2,"./jang.js":4}],4:[function(require,module,exports){
const Script = require('./script.js');

function Jang(element) {
    var _this = this;
    this.element = element;
    this.node = document.createTextNode("");
    this.script = new Script(element.getAttribute('text')).onChange(function (value) {
        _this.node.textContent = value;
    });
    this.element.replaceWith(this.node);
}

Jang.prototype.refresh = function (language) {
    this.script.refresh(language);
}

Jang.prototype.exist = function () {
    return document.body.contains(this.node);
}

module.exports = Jang;
},{"./script.js":5}],5:[function(require,module,exports){
function Script(text) {
    this.text = text;
    this.value = null;
    this.events = { onChange: null };
}

Script.prototype.onChange = function (fn) {
    this.events.onChange = fn;
    return this;
}

Script.prototype.refresh = function (scope) {
    var value = new Function('scope', ' try { return scope.' + this.text + '; } catch(err) { console.log(err); return "' + this.text + '"; }')(scope);
    if (this.value != value) {
        this.value = value;
        this.events.onChange(value);
    }
}

module.exports = Script;
},{}],6:[function(require,module,exports){
module.exports = {
    language: "Engilish",
    change: {
        title: "English language loaded."
    },
    add: {
        title: "Add new DOM element"
    },
    new: {
        title: "New button"
    }
}
},{}],7:[function(require,module,exports){
module.exports = {
    language: "Türkçe",
    change: {
        title: "Türkçe Dili Yüklendi."
    },
    add: {
        title: "Yeni DOM elemanı ekle"
    },
    new: {
        title: "Yeni button"
    }
}
},{}],8:[function(require,module,exports){
const jang = require("../index.js");
const en = require('../locales/en.js');
const tr = require('../locales/tr.js');

const test_libs_attribute = require('./libs/attribute.js');
const test_libs_html = require('./libs/html.js');
const test_libs_jang = require('./libs/jang.js');
const test_libs_script = require('./libs/script.js');

mocha.setup('bdd');

test_libs_attribute();
test_libs_html();
test_libs_jang();
test_libs_script();

describe("index.js test", function () {
    it("add languages to jang", function (done) {
        try {
            jang.add('en', en);
            jang.add([
                { name: 'tr', value: tr }
            ]);

            done();
        } catch (err) {
            done(err);
        }
    });

    it("replace all jang tag and attributes", function (done) {
        try {
            jang.refresh();
            done();
        } catch (err) {
            done(err);
        }
    });

    it("check replacing attributes", function (done) {
        try {
            var btn = document.getElementById('btn');
            if (btn.getAttribute('title') == tr.language)
                done();
            else
                done(new Error("check replacing attributes failed."));
        } catch (err) {
            done(err);
        }
    });

    it("check replacing jangs", function (done) {
        try {
            var btn = document.getElementById('btn');
            if (btn.innerHTML.trim() == tr.language)
                done();
            else
                done(new Error("check replacing jang failed."));
        } catch (err) {
            done(err);
        }
    });

    it("change language name", function (done) {
        try {
            jang.onChange(function (name, value) {
                if (name == "en")
                    done();
                else
                    done(new Error("change language name."));
            });
            jang.set('en');
        } catch (err) {
            done(err);
        }
    });

    it("check changing language", function (done) {
        try {
            var btn = document.getElementById('btn');
            if (btn.innerHTML.trim() == en.language)
                done();
            else
                done(new Error("check changing language failed."));
        } catch (err) {
            done(err);
        }
    });

    it("add new jang and attribute", function (done) {
        try {
            var div = document.createElement('div');
            div.style.display = 'none';
            div.innerHTML = '<button id="newBtn" jang="title:new.title;"> <jang text="new.title"></jang> </button>';
            document.querySelector('body').append(div);
            jang.refresh();

            var btn = document.getElementById('newBtn');
            if (btn.innerHTML.trim() == en.new.title && btn.getAttribute('title') == en.new.title)
                done();
            else
                done(new Error("add new jang and attribute failed."));
        } catch (err) {
            done(err);
        }
    });

    it("clear change event listeners", function (done) {
        try {
            jang.clearOnChanges();
            done();
        } catch (err) {
            done(err);
        }
    });

    it("check changing language of new items", function (done) {
        try {
            jang.set('tr');
            var btn = document.getElementById('newBtn');

            if (btn.innerHTML.trim() == tr.new.title && btn.getAttribute('title') == tr.new.title)
                done();
            else
                done(new Error("check changing language failed."));
        } catch (err) {
            done(err);
        }
    });
});

mocha.setup({ globals: ['jangObject'] });
mocha.checkLeaks();
mocha.run();
},{"../index.js":1,"../locales/en.js":6,"../locales/tr.js":7,"./libs/attribute.js":9,"./libs/html.js":10,"./libs/jang.js":11,"./libs/script.js":12}],9:[function(require,module,exports){
const Attribute = require('../../libs/attribute.js');

module.exports = function () {
    describe("/libs/attribute.js test", function () {
        it("must be function", function (done) {
            try {
                if (typeof (Attribute) == 'function')
                    done();
                else
                    done(new Error('must be function failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("create instance and check properties", function (done) {
            try {
                var element = document.createElement('div');
                element.setAttribute('jang', 'title:language;');
                var instance = new Attribute(element);
                if (typeof (instance) == 'object' && typeof (instance.refresh) == 'function' && typeof (instance.exist) == 'function')
                    done();
                else
                    done(new Error('create instance failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("check fields", function (done) {
            try {
                var element = document.createElement('div');
                element.setAttribute('jang', 'title:language;');
                var instance = new Attribute(element);
                if (instance.element == element && instance.scripts.length == 1 && instance.element.getAttribute('jang') == null)
                    done();
                else
                    done(new Error('check fields failed!'));
            } catch (err) {
                done(err);
            }
        });
    });
}
},{"../../libs/attribute.js":2}],10:[function(require,module,exports){
const html = require('../../libs/html.js');

module.exports = function () {
    describe("/libs/html.js test", function () {
        it("check properties", function (done) {
            try {
                if (html.element == document.getElementsByTagName("html")[0])
                    done();
                else
                    done(new Error('check properties failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("check functions", function (done) {
            try {
                if (typeof (html.refresh) == 'function' && typeof (html.read) == 'function')
                    done();
                else
                    done(new Error('check functions failed!'));
            } catch (err) {
                done(err);
            }
        });

    });
}
},{"../../libs/html.js":3}],11:[function(require,module,exports){
const Jang = require('../../libs/jang.js');
const Script = require('../../libs/script.js');

module.exports = function () {
    describe("/libs/jang.js test", function () {
        it("must be function", function (done) {
            try {
                if (typeof (Jang) == 'function')
                    done();
                else
                    done(new Error('must be function failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("create instance and check properties", function (done) {
            try {
                var element = document.createElement('jang');
                element.setAttribute('text', 'language;');
                var instance = new Jang(element);
                if (typeof (instance) == 'object' && typeof (instance.refresh) == 'function' && typeof (instance.exist) == 'function')
                    done();
                else
                    done(new Error('create instance failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("check fields", function (done) {
            try {
                var element = document.createElement('jang');
                element.setAttribute('text', 'language;');
                var instance = new Jang(element);
                if (instance.element == element && instance.script instanceof Script && instance.exist() == false)
                    done();
                else
                    done(new Error('check fields failed!'));
            } catch (err) {
                done(err);
            }
        });
    });
}
},{"../../libs/jang.js":4,"../../libs/script.js":5}],12:[function(require,module,exports){
const Script = require('../../libs/script.js');
const tr = require('../../locales/tr.js');

module.exports = function () {
    describe("/libs/script.js test", function () {
        it("must be function", function (done) {
            try {
                if (typeof (Script) == 'function')
                    done();
                else
                    done(new Error('must be function failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("create instance and check properties", function (done) {
            try {
                var instance = new Script("language");
                if (typeof (instance) == 'object' && typeof (instance.refresh) == 'function' && typeof (instance.onChange) == 'function')
                    done();
                else
                    done(new Error('create instance failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("check fields", function (done) {
            try {
                var instance = new Script("language");
                if (instance.text == "language" && instance.value == null && instance.events.onChange == null)
                    done();
                else
                    done(new Error('check fields failed!'));
            } catch (err) {
                done(err);
            }
        });

        it("change value", function (done) {
            try {
                new Script("language").onChange(function (value) {
                    if (value == tr.language)
                        done();
                    else
                        done(new Error('change value failed!'));
                }).refresh(tr);
            } catch (err) {
                done(err);
            }
        });
    });
}
},{"../../libs/script.js":5,"../../locales/tr.js":7}]},{},[8]);
